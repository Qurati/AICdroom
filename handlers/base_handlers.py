from aiogram import types
from keyboards.start_kb import start_kb
from keyboards.sub_inl_kb import get_subscription_kb
from profile import *
from config import bot
from keyboards.settings_kb import *
from checkers.chanel_checker import *

def start_com(dp):
    @dp.message_handler(commands=['start'])
    async def send_welcome(message: types.Message):
        user_id = message.from_user.id

        if not await check_user_subscription(bot, user_id):
            await message.answer(
                "‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:",
                reply_markup=get_subscription_kb(REQUIRED_CHANNEL))
            return

        await message.answer("‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
        conn, cursor = get_cursor()
        user_id = message.from_user.id
        cursor.execute("INSERT OR IGNORE INTO database (user_id) VALUES (?)", (user_id,))
        conn.commit()
        await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å ChatGPT. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é.",
                                reply_markup=start_kb(message))

    @dp.message_handler(commands=["profile"])
    async def profile_info(message: types.Message):
        user_id = message.from_user.id
        if not await check_user_subscription(bot, user_id):
            await message.answer(
                "‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:",
                reply_markup=get_subscription_kb(REQUIRED_CHANNEL))
            return
        profile = get_profile(user_id, message.from_user.username)

        profile_text = f"""
            üë§ **–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**  
            üÜî ID: `{profile['user_id']}`  
            üìõ –ò–º—è: `{profile['username']}`  
            ü§ñ –í—ã–±—Ä–∞–Ω–Ω—ã–π –ò–ò: `{profile['ai']}`  
            üõ† –ú–æ–¥–µ–ª—å Chat GPT: `{profile['model']}`  
            üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: `{profile['message_count']}`
            """

        await message.reply(profile_text, parse_mode="Markdown")

    @dp.message_handler(commands=["set_username"])
    async def set_username(message: types.Message):
        user_id = message.from_user.id
        if not await check_user_subscription(bot, user_id):
            await message.answer(
                "‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:",
                reply_markup=get_subscription_kb(REQUIRED_CHANNEL))
            return
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/set_username –í–∞—à–µ_–ò–º—è`")
            return

        new_username = args[1]
        update_username(user_id, new_username)

        await message.reply(f"‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ `{new_username}`", parse_mode="Markdown")

    @dp.message_handler(commands=["ask"])
    async def ask_question(message: types.Message):
        user_id = message.from_user.id
        if not await check_user_subscription(bot, user_id):
            await message.answer(
                "‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:",
                reply_markup=get_subscription_kb(REQUIRED_CHANNEL))
            return
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")

    @dp.message_handler(commands=["about"])
    async def about_bot(message: types.Message):
        user_id = message.from_user.id
        if not await check_user_subscription(bot, user_id):
            await message.answer(
                "‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:",
                reply_markup=get_subscription_kb(REQUIRED_CHANNEL))
            return
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
        await message.answer("–Ø –±–æ—Ç, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ò–ò –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.")

    @dp.message_handler(commands=["stats"])
    async def show_stats(message: types.Message):
        user_id = message.from_user.id
        if not await check_user_subscription(bot, user_id):
            await message.answer(
                "‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:",
                reply_markup=get_subscription_kb(REQUIRED_CHANNEL))
            return
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
        stats = get_user_stats(message.from_user.id)
        if stats['ai'] == "Yandex":
            ai = "Yandex GPT"
        elif stats['ai'] == "GPT":
            ai = "Chat GPT"
        elif stats['ai'] == "Giga":
            ai = "GigaChat"
        else:
            ai = None
        text = (
            f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            f"üß† –ê–∫—Ç–∏–≤–Ω—ã–π –ò–ò: `{stats['ai']}`\n"
            f"üì¶ –ú–æ–¥–µ–ª—å: `{ai}`\n"
            f"üé≠ –†–æ–ª—å: `{stats['role']}`\n"
            f"üóÇ –ö–æ–Ω—Ç–µ–∫—Å—Ç: `{stats['context']} —Å–æ–æ–±—â–µ–Ω–∏–π`\n"
            f"üíæ –í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Å–ª–æ—Ç–∞—Ö: `{stats['slots']}`"
        )

        await message.reply(text, parse_mode="Markdown")

    @dp.message_handler(lambda message: message.text in ['–ü—Ä–æ—Ñ–∏–ª—å'])
    async def profile_info1(message: types.Message):
        user_id = message.from_user.id
        if not await check_user_subscription(bot, user_id):
            await message.answer(
                "‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:",
                reply_markup=get_subscription_kb(REQUIRED_CHANNEL))
            return
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
        profile = get_profile(user_id, message.from_user.username)
        if profile['ai'] == "Yandex":
            ai = "Yandex GPT"
        elif profile['ai'] == "GPT":
            ai = "Chat GPT"
        elif profile['ai'] == "Giga":
            ai = "GigaChat"
        else:
            ai = None
        profile_text = f"""
                üë§ **–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**  
                üÜî ID: `{profile['user_id']}`  
                üìõ –ò–º—è: `{profile['username']}`  
                ü§ñ –í—ã–±—Ä–∞–Ω–Ω—ã–π –ò–ò: `{ai}`  
                üõ† –ú–æ–¥–µ–ª—å Chat GPT: `{profile['model']}`  
                üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–ø–∏—Å–∞–Ω–æ: `{profile['message_count']}`
                """

        await message.reply(profile_text, parse_mode="Markdown")

    @dp.message_handler(lambda message: message.text in ['–ù–∞—Å—Ç—Ä–æ–π–∫–∏', '–í–µ—Ä–Ω—É—Ç—å—Å—è'])
    async def menu_handler(message: types.Message):
        user_id = message.from_user.id
        if not await check_user_subscription(bot, user_id):
            await message.answer(
                "‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:",
                reply_markup=get_subscription_kb(REQUIRED_CHANNEL))
            return
        if message.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏':
            await message.answer("–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=multi_mode_kb(message.from_user.id))
        elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
            await message.answer('–ú–µ–Ω—é', reply_markup=start_kb(message))
