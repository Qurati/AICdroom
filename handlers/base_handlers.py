from aiogram import types
from profile import *
from config import *
from checkers.channel_checker import *
from kb import *


def start_com(dp):
    @dp.message_handler(commands=['start'])
    async def send_welcome(message: types.Message):
        user_id = message.from_user.id

        if not await check_user_subscription(bot, user_id):
            await message.answer(
                "‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:",
                reply_markup=get_subscription_kb(REQUIRED_CHANNEL))
            return

        await message.answer("‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
        conn, cursor = get_cursor()
        user_id = message.from_user.id
        cursor.execute("INSERT OR IGNORE INTO database (user_id) VALUES (?)", (user_id,))
        conn.commit()
        await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –Ω–µ–π—Ä–æ–Ω–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏. –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –ò–ò (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Yandex GPT). –ï—Å–ª–∏ –≤—ã–±–∏—Ä–∞–µ—à—å Chat GPT, —Ç–æ –Ω–µ –∑–∞–±—É–¥—å –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å. \n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!",
                                reply_markup=start_kb(message))

    @dp.message_handler(commands=["set_username"])
    async def set_username(message: types.Message):
        user_id = message.from_user.id
        if not await check_user_subscription(bot, user_id):
            await message.answer(
                "‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:",
                reply_markup=get_subscription_kb(REQUIRED_CHANNEL))
            return
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/set_username –í–∞—à–µ –ò–º—è`")
            return

        new_username = args[1]
        update_username(user_id, new_username)

        await message.reply(f"‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ `{new_username}`", parse_mode="Markdown")

    @dp.message_handler(commands=["ask"])
    async def ask_question(message: types.Message):
        user_id = message.from_user.id
        if not await check_user_subscription(bot, user_id):
            await message.answer(
                "‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:",
                reply_markup=get_subscription_kb(REQUIRED_CHANNEL))
            return
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")

    @dp.message_handler(commands=["about"])
    async def about_bot(message: types.Message):
        user_id = message.from_user.id
        if not await check_user_subscription(bot, user_id):
            await message.answer(
                "‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:",
                reply_markup=get_subscription_kb(REQUIRED_CHANNEL))
            return
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
        await message.answer("–Ø –±–æ—Ç, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ò–ò –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.")

    @dp.message_handler(lambda message: message.text in ['–ü—Ä–æ—Ñ–∏–ª—å'])
    async def profile_info(message: types.Message):
        user_id = message.from_user.id
        if not await check_user_subscription(bot, user_id):
            await message.answer(
                "‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:",
                reply_markup=get_subscription_kb(REQUIRED_CHANNEL))
            return
        roles_map = {
            "–¢—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å, –æ–±—ä—è—Å–Ω—è—é—â–∏–π –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ.": "–£—á–∏—Ç–µ–ª—å",
            "–¢—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥.": "–ü—Å–∏—Ö–æ–ª–æ–≥",
            "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é, –æ—Ç–≤–µ—á–∞–µ—à—å –∫–æ–¥–æ–º –∏ —è—Å–Ω–æ.": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç",
            "–¢—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏.": "–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞",
            "assistant": '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç'
        }
        profile = get_profile(user_id, message.from_user.username)
        stats = get_user_stats(message.from_user.id)
        if profile['ai'] == "Yandex":
            ai = "Yandex GPT"
        elif profile['ai'] == "GPT":
            ai = "Chat GPT"
        elif profile['ai'] == "Giga":
            ai = "GigaChat"
        else:
            ai = None
        if ai == 'Chat GPT':
            profile_text = f"""
          üë§ *–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*  
    üÜî ID: `{profile['user_id']}`  
    üìõ –ò–º—è: `{profile['username']}`  
    üí∞ –ö—Ä–µ–¥–∏—Ç—ã: `{profile['credits']}ü™ô`  
    üîÅ –ó–∞–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: `{stats['requests'][0]}`
    ü§ñ –ò–ò - —Ä–æ–ª—å: `{profile['model']} - {roles_map[stats['role']]}`  
    üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–ø–∏—Å–∞–Ω–æ: `{profile['message_count']}`
    """
        else:
            profile_text = f"""
          üë§ *–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*  
    üÜî ID: `{profile['user_id']}`  
    üìõ –ò–º—è: `{profile['username']}`  
    üí∞ –ö—Ä–µ–¥–∏—Ç—ã: `{profile['credits']}ü™ô`  
    üîÅ –ó–∞–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: `{stats['requests'][0]}`
    ü§ñ –ò–ò - —Ä–æ–ª—å: `{ai} - {roles_map[stats['role']]}`  
    üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–ø–∏—Å–∞–Ω–æ: `{profile['message_count']}`
    """

        await message.reply(profile_text, parse_mode="Markdown", reply_markup=credit_btns)

    @dp.message_handler(lambda message: message.text in ['–ù–∞—Å—Ç—Ä–æ–π–∫–∏', '–í–µ—Ä–Ω—É—Ç—å—Å—è'])
    async def menu_handler(message: types.Message):
        user_id = message.from_user.id
        if not await check_user_subscription(bot, user_id):
            await message.answer(
                "‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:",
                reply_markup=get_subscription_kb(REQUIRED_CHANNEL))
            return
        if message.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏':
            await message.answer("–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=multi_mode_kb(message.from_user.id))
        elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
            await message.answer('–ú–µ–Ω—é', reply_markup=start_kb(message))
