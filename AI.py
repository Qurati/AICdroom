import openai
import re

from config import *
import requests
from context import *
from roles import get_role

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
proxies = {
    "http": "http://user283375:vrwaq1@104.234.228.81:9335",
    "https": "http://user283375:vrwaq1@104.234.228.81:9335",
}

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ–∫—Å–∏
openai.proxy = proxies
openai.api_key = openAI_key


def req(msg):
    try:
        user_id = msg.from_user.id
        print(msg.from_user.username, msg.text)
        conn, cursor = get_cursor()
        cursor.execute("SELECT model FROM database WHERE user_id = ?", (user_id,))
        model = cursor.fetchone()[0]
        cursor.execute("SELECT AI FROM database WHERE user_id = ?", (user_id,))
        ai = cursor.fetchone()[0]

        history = get_context(user_id)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π

        def escape_markdown(text):
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –∑–∞—â–∏—Ç—ã –≤ MarkdownV2
            return re.sub(r'([\[\]()~>#+\-=|{}.!])', r'\\\1', text)


        def format_response(role_text, answer, ai_name):
            ai_name = escape_markdown(ai_name)
            role_text = escape_markdown(role_text)
            answer = escape_markdown(answer)
            if "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å" in role_text:
                role_line = f"üìö *–£—á–∏—Ç–µ–ª—å ({ai_name}) –æ—Ç–≤–µ—á–∞–µ—Ç:*"
            elif "–ø—Å–∏—Ö–æ–ª–æ–≥" in role_text:
                role_line = f"üß† *–ü—Å–∏—Ö–æ–ª–æ–≥ ({ai_name}) –≥–æ–≤–æ—Ä–∏—Ç:*"
            elif "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç" in role_text:
                role_line = f"üõ† *–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ ({ai_name}):*"
            else:
                role_line = f"ü§ñ *{ai_name} –æ—Ç–≤–µ—á–∞–µ—Ç:*"

            # –î–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º markdown-–±–ª–æ–∫ –∫–æ–¥–∞
            if "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç" in role_text:
                return f"{role_line}\n\n ``` {answer}```"
            elif "–ø—Å–∏—Ö–æ–ª–æ–≥" in role_text:
                return f"{role_line}\n\n_{answer}_"
            else:
                return f"{role_line}\n\n{answer}"

        ######### GPT #########
        if ai == 'GPT':
            if model == 'None':
                return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å'

            role_text = get_role(user_id)
            messages = [{"role": "system", "content": role_text}] + history + [{"role": "user", "content": msg.text}]
            response = openai.ChatCompletion.create(
                model=model,
                messages=messages,
            )
            answer = response.choices[0].message['content']
            save_message(user_id, "user", msg.text)
            save_message(user_id, "assistant", answer)
            return format_response(role_text, answer, "ChatGPT")

        ######### Yandex GPT #########
        if ai == 'Yandex':
            url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
            headers = {
                "Content-Type": "application/json",
                "Authorization": "Api-Key AQVNxtxvn4P4wBAMgumtjv_5mcy9iOTByoEXHEK_"
            }

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç Yandex
            role_text = get_role(user_id)
            messages = [{"role": "system", "text": role_text}]
            for message in history:
                messages.append({"role": message["role"], "text": message["content"]})
            messages.append({"role": "user", "text": msg.text})

            prompt = {
                "modelUri": "gpt://b1gmmp5rqqqih8ridk52/yandexgpt-lite",
                "completionOptions": {
                    "stream": False,
                    "temperature": 0.6,
                    "maxTokens": 2000
                },
                "messages": messages
            }

            response = requests.post(url, headers=headers, json=prompt)
            result = response.json()
            result_text = result['result']['alternatives'][0]['message']['text']
            save_message(user_id, "user", msg.text)
            save_message(user_id, "assistant", result_text)
            return format_response(role_text, result_text, "YandexGPT")

    except Exception as e:
        return f'–û—à–∏–±–∫–∞: {e}'

    ######### –ï—Å–ª–∏ –ò–ò –Ω–µ –≤—ã–±—Ä–∞–Ω #########
    if ai == 'None':
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ò–ò"
