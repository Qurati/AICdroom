from aiogram.dispatcher import FSMContext
from aiogram import types
from aiogram.dispatcher.filters.state import State, StatesGroup
from db import *

def start_shop(dp):
    class BuyRequests(StatesGroup):
        waiting_for_amount = State()

    @dp.callback_query_handler(text="buy_requests")
    async def start_buy_requests(call: types.CallbackQuery):
        await call.message.answer("üí≥ –°–∫–æ–ª—å–∫–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å? (1 –∑–∞–ø—Ä–æ—Å = 2 –∫—Ä–µ–¥–∏—Ç–∞)")
        await BuyRequests.waiting_for_amount.set()

    @dp.message_handler(state=BuyRequests.waiting_for_amount)
    async def process_buy_amount(message: types.Message, state: FSMContext):
        try:
            count = int(message.text.strip())
            val = count*2
            if count < 1:
                await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
                return

            user_id = message.from_user.id
            conn, cursor = get_cursor()

            cursor.execute("SELECT credits FROM profile WHERE user_id = %s", (user_id,))
            row = cursor.fetchone()
            balance = row[0] if row else 0

            if val > balance:
                await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤. –£ –≤–∞—Å {balance}, –Ω—É–∂–Ω–æ {val}.")
            else:
                # –°–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã
                cursor.execute("UPDATE profile SET credits = credits - %s WHERE user_id = %s", (val, user_id))
                cursor.execute("UPDATE profile SET daily_requests_left = daily_requests_left + %s WHERE user_id = %s",
                            (count, user_id))
                conn.commit()
                await message.answer(f"‚úÖ –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {count} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!")
            await state.finish()
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            await state.finish()
