from aiogram.dispatcher import FSMContext
from config import *
from aiogram import types
from aiogram.dispatcher.filters.state import State, StatesGroup
from db import *
import ast
import uuid
from yookassa import Configuration, Payment
from yookassa import Payment as YooPayment

provider = ast.literal_eval(PROVIDER_TOKEN)[0]
payment_id = {}

Configuration.account_id = int(provider[0])
Configuration.secret_key = provider[1]

def start_bank(dp):
    @dp.callback_query_handler(lambda c: c.data.startswith("check_payment_"))
    async def check_payment_status(call: types.CallbackQuery):
        payment_id = call.data.split("_")[-1]
        try:
            payment = YooPayment.find_one(payment_id)
            if payment.status == "succeeded":
                amount = int(float(payment.amount.value))
                add_user_credits(call.from_user.id, amount)
                await call.message.edit_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ó–∞—á–∏—Å–ª–µ–Ω–æ {amount} ü™ô –∫—Ä–µ–¥–∏—Ç–æ–≤.")
            else:
                await call.answer("‚ùó –ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        except Exception as e:
            await call.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç—ë–∂", show_alert=True)
            print("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞:", e)

    class BuyCreditsState(StatesGroup):
        waiting_for_amount = State()

    @dp.callback_query_handler(text="buy_credits")
    async def start_buy_credits(call: types.CallbackQuery):
        await call.message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–º–∏–Ω–∏–º—É–º 10 ‚ÇΩ):")
        await BuyCreditsState.waiting_for_amount.set()

    @dp.message_handler(state=BuyCreditsState.waiting_for_amount)
    async def handle_amount_input(message: types.Message, state: FSMContext):
        try:
            amount = int(message.text.strip())

            if amount < 10:
                await message.answer("‚ùó –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî 10 ‚ÇΩ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            await state.update_data(amount=amount)

            payment_id = str(uuid.uuid4())

            # –°–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂ –≤ YooKassa
            payment = Payment.create({
                "amount": {
                    "value": str(amount),
                    "currency": "RUB"
                },
                "confirmation": {
                    "type": "redirect",
                    "return_url": "https://t.me/AICdroom_bot"  # –∫—É–¥–∞ –≤–µ—Ä–Ω—É—Ç—å –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
                },
                "capture": True,
                "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {amount} ‚ÇΩ –æ—Ç {message.from_user.id}",
                "metadata": {
                    "user_id": message.from_user.id,
                    "amount": amount
                }
            }, payment_id)

            confirmation_url = payment.confirmation.confirmation_url

            await message.answer(
                f"üîó –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{confirmation_url}",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"check_payment_{payment.id}")
                )
            )
            await state.finish()

        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")


        except ValueError:
            await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")