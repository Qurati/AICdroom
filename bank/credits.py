from aiogram.dispatcher import FSMContext
from aiogram.types import LabeledPrice
from config import *
from aiogram import types
from aiogram.dispatcher.filters.state import State, StatesGroup
from db import *


def start_bank(dp):
    class BuyCreditsState(StatesGroup):
        waiting_for_amount = State()

    @dp.callback_query_handler(text="buy_credits")
    async def start_buy_credits(call: types.CallbackQuery):
        await call.message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–º–∏–Ω–∏–º—É–º 100 ‚ÇΩ):")
        await BuyCreditsState.waiting_for_amount.set()

    @dp.message_handler(state=BuyCreditsState.waiting_for_amount)
    async def handle_amount_input(message: types.Message, state: FSMContext):
        try:
            amount = int(message.text.strip())

            if amount < 100:
                await message.answer("‚ùó –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî 100 ‚ÇΩ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            await state.update_data(amount=amount)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å –Ω–∞ –æ–ø–ª–∞—Ç—É
            prices = [types.LabeledPrice(label=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {amount} ‚ÇΩ", amount=amount * 100)]

            await bot.send_invoice(
                chat_id=message.chat.id,
                title="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤(–¢–ï–°–¢)",
                description="–ö—Ä–µ–¥–∏—Ç—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –ø–æ–¥–ø–∏—Å–æ–∫",
                provider_token=PROVIDER_TOKEN,
                currency="RUB",
                prices=prices,
                start_parameter="credits",
                payload=str(amount)  # –ø–µ—Ä–µ–¥–∞—ë–º —Å—É–º–º—É –≤ payload
            )

            await state.finish()

        except ValueError:
            await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

    @dp.pre_checkout_query_handler(lambda query: True)
    async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
        await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)

    @dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
    async def successful_payment(message: types.Message):
        amount_rub = message.successful_payment.total_amount // 100  # –≤ —Ä—É–±–ª—è—Ö
        add_user_credits(message.from_user.id, amount_rub)
        await message.answer(f"‚úÖ –£—Å–ø–µ—Ö! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount_rub} ü™ô –∫—Ä–µ–¥–∏—Ç–æ–≤.")
